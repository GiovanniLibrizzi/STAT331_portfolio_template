---
title: "Statistical Computing with R Portfolio"
author: "Giovanni Librizzi"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

These code chunks are provided from Labs and Challenges that demonstrate proficiency with a wide variety of R techniques.

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` (Lab 3, Q1)

```{r wd-1-csv}
hiphop <- read_csv(here::here("Week3", "Lab3", "hiphop.csv"))
```

-   `xlsx` (Practice Activity 4)

```{r wd-1-xlsx}
military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip = 7, 
                      n_max = 190)
```

-   `txt` (Preview Activity 2.2)

```{r wd-1-txt}
read_delim("Ages_Data/ages_mystery.txt", delim = "|")
```

**WD-2: I can select necessary columns from a dataset.**

(Lab 3, Q9)

```{r wd-2}
demographics <- hiphop_clean |>
  distinct(subj, .keep_all = TRUE) |>
  select(sex, age, ethnic) 
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (Lab 3, Q11)

```{r wd-3-numeric}
under20 <- hiphop_clean |>
  filter(age < 20) |>
  mutate(familiarity = as.numeric(familiarity)) |>
  group_by(word) |>
  summarize(
    familiarity = mean(familiarity)
  ) 
```

-   character -- specifically a string (Practice activity 8 make_phrase)

```{r wd-3-string}
if (str_detect(str_sub(item, 1, 1), "[aeiou]")) {
  item <-str_c("an", item, sep = " ")
} else {
  item <-str_c("a", item, sep = " ")
}
```

-   factor (Lab 3, Q12)

```{r wd-3-factor}
nonwhitewomen <- hiphop_clean |>
  filter(white == FALSE, sex == "Female") |>
  mutate(familiarity = as.numeric(familiarity)) |>
  group_by(word) |>
  summarize(
    familiarity = mean(familiarity)
  ) 
```

-   date (Practice Activity 5.1)

```{r wd-3-date}
suspects_clean <- suspects_clean %>%
  filter(pm(with_tz(Time.Spotted, tzone = "Iceland")))
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (Lab 7 3.4)

```{r wd-4-numeric}
recapture_scaled <- recapture_data |>
  mutate(length_scaled = rescale_01(length))
```

-   character -- specifically a string (Practice Activity 8)

```{r wd-4-string}

pluralize_gift <- function(gift){

  if (str_detect(gift, "o{2}")) {
    gift <- str_replace(gift, "o{2}", "ee")
  } else if (str_detect(gift, "y$")) {
    gift <- str_replace(gift, "y$", "ies")
  } else {
    gift <- str_c(gift, "s", sep = "")
  }


  return(gift)

}

```

-   factor (Lab 7 3.5)

```{r wd-4-factor}
  data <- data |>
    mutate(across(
      .cols = {{ variables }},
      .fns = ~ rescale_01(.x)
    ))
```

-   date (Practice Activity 5.1)

```{r wd-4-date}
suspects <- suspects %>%
  mutate(Time.Spotted = ymd_hms(Time.Spotted),
         Time.Spotted = force_tz(Time.Spotted,
                                 tzone = "America/Los_Angeles")
         )
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `right_join()` (Preview Activity 4.3)

```{r wd-5-right}
right_join(prof_info, prof_course)
```

-   `inner_join()` (Challenge 4)

```{r wd-5-inner}
ca_avocado_housing <- avocado_california |>
  group_by(region, year) |>
  summarize(
    median_total_sold = median(total_volume), 
    median_avocado_price = median(AveragePrice)
  ) |>
  inner_join(housing_prices, by = join_by(region, year))
```

-   `full_join()` (Preview Activity 4.3)

```{r wd-5-full}
prof_course |>
  pivot_longer(cols = c("Stat_331", "Stat_330", "Stat_431"),
               names_to = "course",
               values_to = "can_teach"
               ) |>
  full_join(course_info, by = "course")
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()` (Lab 4, \~Q6)

```{r wd-6-semi}
avocado_california <- avocado_clean |>
  semi_join(california_names, by = join_by(region))
```

-   `anti_join()` (Lab 4, \~Q2)

```{r wd-6-anti}
avocado_metro_region <- avocado_clean |>
  anti_join(major_region_names, by = join_by(region)) |>
  anti_join(state_names, by = join_by(region)) |>
  filter(region != "TotalUS")
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()` (Lab 4, Q7)

```{r wd-7-long}
ca_hass_type <- avocado_california |>
  select(Date, type, AveragePrice, region, sales_hass_small, sales_hass_large, sales_hass_extralarge) |>
  pivot_longer(
    cols = sales_hass_small:sales_hass_extralarge,
    names_to = "hass",
    values_to = "sales"
  ) |>
  mutate(hass = as.factor(hass)) |>
  arrange(desc(hass))
```

-   `pivot_wider()` (Lab 4, Q6)

```{r wd-7-wide}
ca_city_difference <- avocado_california |>
  select(Date, type, AveragePrice, region) |>
  pivot_wider(names_from = type, values_from = AveragePrice) |>
  group_by(region) |>
  summarize(type_diff = sum(organic)-sum(conventional), 
            type_mean_diff = mean(organic)-mean(conventional),
            mean_organic = mean(organic),
            mean_conventional = mean(conventional)
            ) |>
  arrange(desc(type_mean_diff))
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

Lab 3, Lab 4, Lab 5

**R-2: I can write well documented and tidy code.**

-   Example 1 (Lab 4, Q5, tidy code and comments)

```{r r-2-1}
# Find top 5 regions (metro)
metro_top_5 <- avocado_metro_region |>
  group_by(region) |>
  summarize(total_sales = sum(total_volume)) |>
  slice_max(order_by = total_sales, n = 5)

# Generate plot
options(scipen = 999)
avocado_metro_region |>
  semi_join(metro_top_5, by = join_by(region)) |>
  ggplot(mapping = aes(x = total_volume, y = region)) +
  geom_boxplot() +
  labs(
    x = "Total Volume of Avocados Sold",
    y = "Metro Region",
    title = "Total Volume of Avocados Sold by the Metro Region"
  )
```

-   Example 2 (Lab 5, Q2.4)

```{r r-2-2}
ggplot(data = survey_genus,
       mapping = aes(
         x = year, 
         y = weight_mean, 
         color = fct_reorder(genus, desc(weight_mean))
         )
       ) +
  geom_line() +
  labs(
    x = "Year",
    y = NULL,
    title = "Mean Weight by Year for Genus of Rodent",
    color = "Genus of Rodent"
    ) + 
  theme(
    plot.title.position = "plot"
  )
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1 (Lab 3, Q11)

```{r r-3-1}
# slice_max
under20 <- hiphop_clean |>
  filter(age < 20) |>
  group_by(word) |>
  summarize(
    familiarity = mean(as.numeric(familiarity))
  ) 
under20 |>
  slice_max(familiarity)
```

-   Example 2 (Lab 7, 3.1) (min/max function usage)

```{r r-3-2}
rescale_01 <- function(vec) {
  stopifnot(is.numeric(vec), length(vec) > 1)
  #vec <- vec[!is.na(vec)]
  v_min <- min(vec, na.rm = TRUE)
  v_max <- max(vec, na.rm = TRUE)
  
  vec <- (vec - v_min) / (v_max - v_min)
  
  return(vec)
}
```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   numeric variables (Challenge 7, 4.3 part 3)

```{r dvs-1-num}
recapture_cut |>
  ggplot(mapping = aes(x = condition_index, y = factor(year))) +
  geom_density_ridges(mapping = aes(fill = factor(year))) +
  scale_colour_brewer(palette = "RdYlBu") +
  xlim(0.3, 3) +
  labs(
    x = "Condition Index",
    y = NULL,
    title = "Condition Index over Year for Recaptured Fish in Blackfoot River",
    color = "Section"
  ) +
  theme(
    plot.title.position = "plot",
    legend.position="none"
  )
```

![](images/image-1818941347.png)

-   numeric variables and categorical variables (Lab 5, Q3.2)

```{r dvs-2-num-cat}
day_order <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")

ggplot(data = rodents_week,
       mapping = aes(
         x = fct_relevel(day_of_week, day_order),
         y = rodents_captured
        )
       ) +
  geom_col() +
  labs(x = "Day of Week",
       y = NULL,
       title = "Rodents Captured by Day of Week"
   ) + 
  theme(
    plot.title.position = "plot"
  )
```

![](images/image-1993423438.png)

-   categorical variables (Lab 4 Q7)

```{r dvs-2-cat}
# Generate graph
ca_hass_type |>
  ggplot(mapping = aes(
    x = region, 
    y = sales, 
    fill = factor(
      hass, 
      levels = c("sales_hass_small", 
                 "sales_hass_large", 
                 "sales_hass_extralarge")
      )
    )) +
  geom_bar(position = "fill", stat = "identity") +
  scale_fill_manual(
    values = c("#a6cee3", "#1f78b4", "#b2df8a"),
    labels = c("Small", "Large", "Extra Large"),
    name = "Avocado Size") +
  scale_x_discrete(guide = guide_axis(n.dodge=2))+
  facet_wrap(~ type) +
  labs(x = "Region of CA",
      y = "Proportion of Mean Avocados Sold"   
  )
```

![](images/image-52694323.png)

-   dates (Lab 5, Q2.4)

```{r dvs-2-date}
ggplot(data = survey_genus,
       mapping = aes(
         x = year, 
         y = weight_mean, 
         color = fct_reorder(genus, desc(weight_mean))
         )
       ) +
  geom_line() +
  labs(
    x = "Year",
    y = NULL,
    title = "Mean Weight (grams) by Year for Genus of Rodent Captured",
    color = "Genus of Rodent"
    ) + 
  theme(
    plot.title.position = "plot"
  )
```

![](images/image-1032469904.png)

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1 (Lab 5, Q2.4) - Organized legend to be in the same order as lines

```{r dvs-2-1}
ggplot(data = survey_genus,
       mapping = aes(
         x = year, 
         y = weight_mean, 
         color = fct_reorder(genus, desc(weight_mean))
         )
       ) +
  geom_line() +
  labs(
    x = "Year",
    y = NULL,
    title = "Mean Weight (grams) by Year for Genus of Rodent Captured",
    color = "Genus of Rodent"
    ) + 
  theme(
    plot.title.position = "plot"
  )
```

-   Example 2 (Lab 5, Q1) - order graph by weight and jitter so the raw data is visible

```{r dvs-2-2}
ggplot(data = surveys, 
       mapping = aes(
         x = weight,
         y = fct_reorder(species, weight) #species
         )
       ) + 
  geom_jitter(color = "Tomato", alpha = 0.2) +
  geom_boxplot(outlier.alpha = 0) + 
  labs(x = "Weight (g)", y = NULL, 
       title = "Distribution of Weight by Species of Rodent"
   ) + 
  theme(
    plot.title.position = "plot"
  )
```

![](images/image-731949865.png)

**DVS-3: I show creativity in my visualizations**

-   Example 1 (Challenge 2, Q2.2)

```{r dvs-3-1}
ggplot(data = surveys, mapping = aes(x = weight, y = species, color = genus)) + 
  geom_jitter(color = "DarkGrey", alpha = 0.2) +
  geom_boxplot(outlier.alpha = 0, lwd = 0.5) + 
  scale_colour_brewer(palette = "Pastel2") +
  labs(x = "Weight (g)", y = "Species", color = "Rodent Genus",
       title = "Distribution of Weight Within Species"
   )
```

![](images/image-1006870100.png)

-   Example 2 (Challenge 7, 4.3 Pt 3)

```{r dvs-3-2}
recapture_cut |>
  ggplot(mapping = aes(x = condition_index, y = factor(year))) +
  geom_density_ridges(mapping = aes(fill = factor(year))) +
  scale_colour_brewer(palette = "RdYlBu") +
  xlim(0.3, 3) +
  labs(
    x = "Condition Index",
    y = NULL,
    title = "Condition Index over Year for Recaptured Fish in Blackfoot River",
    color = "Section"
  ) +
  theme(
    plot.title.position = "plot",
    legend.position="none"
  )

```

![](images/image-1324580255.png)

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1 (Lab 3, Q6)

```{r dvs-4-1}
hiphop_clean |>
  distinct(word) |>
  count(word, name = "wordCount") |>
  summarize(
      sumWords = sum(wordCount)
  )
```

-   Example 2 (Lab 4, Q6)

```{r dvs-4-2}
ca_city_difference <- avocado_california |>
  select(Date, type, AveragePrice, region) |>
  pivot_wider(names_from = type, values_from = AveragePrice) |>
  group_by(region) |>
  summarize(type_diff = sum(organic)-sum(conventional), 
            type_mean_diff = mean(organic)-mean(conventional),
            mean_organic = mean(organic),
            mean_conventional = mean(conventional)
            ) |>
  arrange(desc(type_mean_diff))
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1 (Challenge 3, 5.1)

```{r dvs-5-1}
demographic |>
  group_by(sex) |>
  summarize(
    across(
      .cols = intl:hiphop,
      .fns = ~ mean(.x)
      )
    )
```

-   Example 2 (Lab 7, 2.1)

```{r dvs-5-2}
recapture_na <- recapture_data |>
  summarize(
   across(
     trip:species,
     ~ sum(is.na(.x)),
     .names = "{.col}_na"
   ) 
  )
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1 (Challenge 9 Q10)

```{r dvs-6-1}
allan_percent <- allan_state |>
  group_by(State) |>
  mutate(prop = Count / sum(Count)) |>
  select(-Count) |>
  pivot_wider(names_from = Name,
              values_from = prop,
              values_fill = 0)

allan_percent %>%
  gt() %>%
  fmt_percent(columns = Alan:Allan, decimals = 2)
```

-   Example 2 (Challenge 7 Setup)

```{r dvs-6-2}
rainbow_trout_avg <- recapture_data |>
  filter(species == "RBT") |>
  summarize(
    avg_length = median(length), 
    avg_weight = median(weight, na.rm = TRUE)
    )
```

**DVS-7: I show creativity in my tables.**

-   Example 1 (Challenge 9 Q8)

```{r dvs-7-1}
alan_spelling <- names_a |>
  filter(Name %in% c("Allan", "Alan", "Allen")) |>
  group_by(Name, Year) |>
  summarize(n = sum(Count))

alan_spelling %>%
  head(n = 15) %>%
  knitr::kable(
    caption = "Number of Babies Named Different Allen Spellings by Year (head=15)",
    booktabs = TRUE
  ) %>%
  kable_styling(font_size = 10,
                latex_options = "striped",
                )
```

![](images/image-946160797.png)

-   Example 2 (Challenge 9 Q1)

```{r dvs-7-2}
allison_data <- names_a |>
  filter(Name == "Allison") |>
  select(-Year) |>
  group_by(State, Sex) |>
  summarize(n = sum(Count)) |>
  pivot_wider(names_from = Sex,
              values_from = n,
              values_fill = 0) |>
  rename(Male = M, Female = F)

allison_data |>
  head(n = 15) |>
  knitr::kable(
    caption = "Number of Babies Named \"Allison\" by State and Sex (head=15)"
  ) |>
  kable_styling(font_size = 15)
```

![](images/image-183176312.png)

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call (Lab 4, Q2, rename function)

```{r pe-1-one-call}
# Clean the base avocado dataset
avocado_clean <- avocado |>
  rename(
    "sales_hass_small" = `4046`,
    "sales_hass_large" = `4225`,
    "sales_hass_extralarge" = `4770`,
    "total_volume" = "Total Volume",
    "bags_total" = "Total Bags",
    "bags_small" = "Small Bags",
    "bags_large" = "Large Bags",
    "bags_extra_large" = "XLarge Bags"
    ) |>
  mutate(type = as.factor(type)) |>
  select(!"...1")
```

-   `across()` (Lab 3, Q5)

```{r pe-1-across}
hiphop_clean <- hiphop |>
  # sets as factors
  mutate(across(
    .cols = c(
      jayz,
      sex,
      ethnic,
      barkley,
      boondocks,
      monique,
      bieber,
      jayz1,
      boondocks1,
      familiarity,
      popularityScore
    ), 
    .fns = ~ as.factor(.x)
  )) 
```

-   `map()` functions (Lab 8 Step 3)

```{r pe-1-map-1}
phrases <- map_chr(
      .x = line:1,
      .f = ~ phrases[.x]
    )
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1 (Challenge 7, 4.1)

```{r pe2-1}
na_not_between <- function(measurements, min_val, max_val) {
  stopifnot(is.numeric(measurements), length(measurements) >= 1)
  
  result <- case_when(
      between(measurements, min_val, max_val) ~ measurements
    )
    
  return(result)
}
```

-   Example 2 (Lab 7, 3.5)

```{r pe2-2}
rescale_column <- function(data, variables) {
  stopifnot(is.data.frame(data))
  
  data <- data |>
    mutate(across(
      .cols = {{ variables }},
      .fns = ~ rescale_01(.x)
    ))
  
  return(data)
  
}
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()` (Lab 5 Q1)

```{r pe-3-across}
surveys <- surveys |>
  mutate(
    across(
    .cols = c(plot_type:taxa, day_of_week), 
    .fns = ~ as.factor(.x)
    )
  )
```

-   `map()` functions (Provide 2 Examples)

    Challenge 8 Step 3

```{r pe-3-map-1}
phrases <- map_chr(
      .x = line:1,
      .f = ~ if_else(
          .x > 1, 
          str_c(phrases[.x], ","), 
          phrases[.x]
      ) 
    )
```

Lab 8 Step 4

```{r pe-3-map-2}
full_song <- map_chr(
    .x = 1:12,
    .f = ~ sing_day(xmas2, .x, Full.Phrase)
  )
```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1  (Lab 4, Q5) slice_max

```{r pe-4-1}
metro_top_5 <- avocado_metro_region |>
  group_by(region) |>
  summarize(total_sales = sum(total_volume)) |>
  slice_max(order_by = total_sales, n = 5)
```

-   Example 2 (lab 7 3.5) modern across syntax in function, pipe

```{r pe-4-2}
  data <- data |>
    mutate(across(
      .cols = {{ variables }},
      .fns = ~ rescale_01(.x)
    ))
```

## Data Simulation & Modeling

**DSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1 (Practice 9.2)

```{r dsm-1-1}
trombone_weights <- rnorm(n = 100, mean = 4.6, sd = 0.8)

```

-   Example 2 (Practice 9.2

```{r dsm-1-2}
cornets <- runif(n_cor, min = 1.5, max = 3.5)

```

**DSM-2: I can fit a linear regression and extract necessary summary measures.**

-   Example 1 (Practice 9.1)

```{r dsm-2-1}
animal_lm <- lm(weight_after ~ weight_before, data = animal)

animal_lm |>
  broom::augment() |>
  ggplot(mapping = aes(y = .resid, x = .fitted)) +
  geom_point()

```

-   Example 2 (Lab 9 Q6)

```{r dsm-2-2}
allison_lm |>
  broom::augment() |>
  ggplot(mapping = aes(y = .resid, x = .fitted)) +
  geom_point() +
  labs(x = "Fitted",
       y = "Residuals",
       title = "Residuals of the Allison Model"
       )
```
